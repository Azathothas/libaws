#!/usr/bin/env python3.6
import time
import datetime
import boto3
import argh
import aws_util

def main(path, limit=100, follow=False):
    group_name = f'/aws/lambda/{aws_util.lambda_name(path)}'
    print('log group:', group_name)
    if follow:
        token = ''
        stream_name = None
        while True:
            if not stream_name:
                try:
                    stream_name = boto3.client('logs').describe_log_streams(logGroupName=group_name, orderBy='LastEventTime')['logStreams'][-1]['logStreamName']
                    print('log stream:', stream_name)
                except boto3.client('logs').exceptions.ResourceNotFoundException:
                    continue
            kw = {}
            if token:
                kw['nextToken'] = token
            resp = boto3.client('logs').get_log_events(logGroupName=group_name, logStreamName=stream_name, limit=limit, **kw)
            token = resp['nextForwardToken']
            logs = resp['events']
            for log in logs:
                print(datetime.datetime.fromtimestamp(log['timestamp'] / 1000),
                      log['message'].replace('\t', ' ').strip())
            time.sleep(1)
    else:
        stream_name = boto3.client('logs').describe_log_streams(logGroupName=group_name, orderBy='LastEventTime')['logStreams'][-1]['logStreamName']
        print('log stream:', stream_name)
        logs = boto3.client('logs').get_log_events(logGroupName=group_name, logStreamName=stream_name, limit=limit)['events']
        for log in logs:
            print(datetime.datetime.fromtimestamp(log['timestamp'] / 1000),
                  log['message'].replace('\t', ' ').strip())

if __name__ == '__main__':
    with aws_util.setup():
        argh.dispatch_command(main)
