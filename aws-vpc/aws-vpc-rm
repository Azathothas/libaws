#!/usr/bin/env python3
import boto3
import shell
import argh
import cli_aws
import sys

def main(vpc_id, yes=False):
    if not vpc_id.startswith('vpc-'):
        vpcs = list(boto3.resource('ec2').vpcs.filter(Filters=[{'Name': 'tag:Name', 'Values': [vpc_id]}]))
        assert len(vpcs) == 1, vpcs
        vpc_id = vpcs[0].id
    vpc = boto3.resource('ec2').Vpc(vpc_id)
    print('going to delete:', cli_aws.tags(vpc).get('Name', '<no-name>'), vpc_id)
    if not yes:
        print('\nwould you like to proceed? y/n\n')
        assert shell.getch() == 'y', 'abort'

    # check all subnets for ec2 instances
    for subnet in vpc.subnets.all():
        instances = list(subnet.instances.all())
        if instances:
            print('error: there are ec2 instances in vpc:', vpc_id)
            sys.exit(1)

    # detach and delete internet gateway
    for gateway in vpc.internet_gateways.all():
        vpc.detach_internet_gateway(InternetGatewayId=gateway.id)
        gateway.delete()
        print('deleted:', gateway)

    # delete route table entries
    for route_table in vpc.route_tables.all():
        for association in route_table.associations:
            if not association.main:
                association.delete()
                print('deleted:', association)

    # delete vpc endpoints
    endpoints = boto3.client('ec2').describe_vpc_endpoints(Filters=[{'Name': 'vpc-id', 'Values': [vpc_id]}])['VpcEndpoints']
    for endpoint in endpoints:
        boto3.client('ec2').delete_vpc_endpoints(VpcEndpointIds=[endpoint['VpcEndpointId']])
        print('deleted:', endpoint['VpcEndpointId'], endpoint['ServiceName'])

    # delete security groups
    for sg in vpc.security_groups.all():
        if sg.group_name != 'default':
            sg.delete()
            print('deleted:', sg)

    # delete peering connections
    vpc_peers = boto3.client('ec2').describe_vpc_peering_connections(Filters=[{'Name': 'requester-vpc-info.vpc-id', 'Values': [vpc_id]}])['VpcPeeringConnections']
    for vpc_peer in vpc_peers:
        boto3.resource('ec2').VpcPeeringConnection(vpc_peer['VpcPeeringConnectionId']).delete()
        print('deleted:', vpc_peer)

    # delete nacls
    for nacl in vpc.network_acls.all():
        if not nacl.is_default:
            nacl.delete()
            print('deleted:', nacl)

    # delete subnets
    for subnet in vpc.subnets.all():
        for interface in subnet.network_interfaces.all():
            interface.delete()
            print('deleted:', interface)
        subnet.delete()
        print('deleted:', subnet)

    # delete vpc
    boto3.client('ec2').delete_vpc(VpcId=vpc_id)
    print('deleted:', vpc)

if __name__ == '__main__':
    with cli_aws.setup():
        argh.dispatch_command(main)
