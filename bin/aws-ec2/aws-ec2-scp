#!/usr/bin/env python3
import itertools
import argh
import sys
import aws
import aws.ec2
import shell as sh
import util.colors
import pool.thread
from aws import stderr

def main(src, dst, *selectors, user='', yes=False, internal=False):
    assert selectors, 'you must specify some selectors'
    instances = aws.ec2.ls(selectors, 'running')
    assert instances, 'didnt find any instances'
    if not instances:
        sys.exit(1)
    else:
        for instance in instances:
            stderr(aws.ec2.format(instance))
        if not yes:
            stderr('\nwould you like to proceed? y/n\n')
            assert sh.getch() == 'y', 'abort'
        def run(instance, color):
            if color:
                color = getattr(util.colors, color)
            else:
                color = lambda x: x
            name = aws.ec2.tag_name(instance) + ' ' + instance.id + ': '
            def fn():
                host = (user or aws.ec2.ssh_user(instance)) + '@' + (instance.private_ip_address if internal else instance.public_dns_name)
                _src = host + src if src.startswith(':') else src
                _dst = host + dst if dst.startswith(':') else dst
                try:
                    sh.run('scp',
                           aws.ec2.ssh_args,
                           _src,
                           _dst,
                           callback=lambda _, x: print(color(name + x), file=sys.stderr, flush=True))
                except:
                    failures.append(util.colors.red('failure: ') + aws.ec2.tag_name(instance) + ' ' + instance.id)
                else:
                    successes.append(util.colors.green('success: ') + aws.ec2.tag_name(instance) + ' ' + instance.id)
            return fn
        failures = []
        successes = []
        pool.thread.wait(*map(run, instances, itertools.cycle(util.colors._colors) if len(instances) > 1 else [False]))
        stderr('\nresults:')
        for msg in successes + failures:
            print(' ' + msg)
        if failures:
            sys.exit(1)

if __name__ == '__main__':
    with aws.setup():
        argh.dispatch_command(main)
