#!/usr/bin/env python3
from typing import List
import subprocess
import os
import argh
import sys
import shell as sh
import pool.thread
import util.strings
import util.colors
import aws
import aws.ec2
from aws import stderr

def _remote_cmd(cmd, stdin, instance_id):
    return f"""
    fail_msg="failed to run cmd on instance: {instance_id}"
    mkdir -p ~/.cmds || echo $fail_msg
    path=~/.cmds/$(uuidgen)
    input=$path.input
    echo {util.strings.b64_encode(cmd)}   | base64 -d > $path  || echo $fail_msg
    echo {util.strings.b64_encode(stdin)} | base64 -d > $input || echo $fail_msg
    cat $input | bash $path
    code=$?
    if [ $code != 0 ]; then
        echo $fail_msg
        exit $code
    fi
    """

def _make_callback(instance, quiet, append=None, no_stream=False):
    name = instance.id + ': '
    def f(_, line):
        val = (line if quiet else name + line).replace('\r', '')
        if append is not None:
            append.append(val)
        if not no_stream:
            stderr(val)
    return f

def main(*selectors,
         stdin: 'stdin value to be provided to remote cmd' = '', # type: ignore
         quiet: 'less output' = False, # type: ignore
         no_stream: 'dont stream to stderr, only output to stdout' = False, # type: ignore
         cmd: 'cmd to run on remote host, - to read from stdin, or script file path' = '', # type: ignore
         yes: 'no prompt to proceed' = False, # type: ignore
         max_threads: 'max ssh connections' = 32, # type: ignore
         timeout: 'seconds before ssh cmd considered failed' = None, # type: ignore
         no_tty: 'when backgrounding a process, you dont want a tty' = False, # type: ignore
         key: 'speficy ssh key' = None, # type: ignore
         echo: 'echo some info about what was run on which hosts' = False, # type: ignore
         batch_mode: 'operate like there are many instances, even if only one' = False, # type: ignore
         prefixed: 'when running against a single host, should streaming output be prefixed with name and ip' = False, # type: ignore
         error_message: 'error message to print for a failed host, something like: {id} {name} {ip} {ipv4_private} failed' = '', # type: ignore
         internal: 'use internal ipv4 address' = False, # type: ignore
         user: 'what user to login as, otherwise an "user" tag is expected on the instance' = ''): # type: ignore
    pool.thread.size = max_threads
    assert selectors, 'you must specify some selectors'
    instances = aws.ec2.ls(selectors, 'running')
    assert instances, 'didnt find any instances'
    if cmd == '-':
        cmd = sys.stdin.read()
    elif stdin == '-':
        stdin = sys.stdin.read()
    if os.path.isfile(cmd):
        with open(cmd) as f:
            cmd = f.read()
    if cmd and 'set -e' not in cmd:
        if cmd.startswith('#!'):
            lines = cmd.splitlines()
            lines.insert(1, 'set -euo pipefail')
            cmd = '\n'.join(lines)
        else:
            cmd = 'set -euo pipefail\n' + cmd
    assert (cmd and instances) or len(instances) == 1, 'must specify --cmd to target multiple instances'
    if not (quiet and yes):
        for i in instances:
            stderr(aws.ec2.format(i))
    ssh_cmd = ('ssh' + (f' -i {key} ' if key else '') + (' -tt ' if not no_tty or not cmd else ' -T ') + aws.ec2.ssh_args).split()
    if echo:
        stderr(f'ec2.ssh running against selectors: {selectors}, with cmd: {cmd}')
    if timeout:
        ssh_cmd = ['timeout', str(timeout)] + ssh_cmd
    if not user:
        _ = aws.ec2.ssh_user(*instances) # asserts
    make_ssh_cmd = lambda i: ssh_cmd + [(user or aws.ec2.ssh_user(i)) + '@' + (i.private_ip_address if internal else i.public_dns_name), _remote_cmd(cmd, stdin, i.instance_id)]
    login = len(instances) == 1 and not cmd
    if not yes and not login:
        stderr('\nwould you like to proceed? y/n\n')
        assert sh.getch() == 'y', 'abort'
    if cmd and len(instances) > 1 or batch_mode:
        failures = []
        successes = []
        results: List[str] = []
        def run(instance):
            resp = sh.run(*make_ssh_cmd(instance),
                          callback=_make_callback(instance, quiet, results, no_stream),
                          echo=False,
                          raw_cmd=True,
                          stream=False,
                          warn=True)
            if resp['exitcode'] != 0:
                if error_message:
                    print(error_message.format(id=instance.instance_id,
                                               ip=instance.public_dns_name,
                                               ipv4_private=instance.private_ip_address,
                                               name=aws.ec2.tag_name(instance)),
                          flush=True)
                msg = util.colors.red('failure: ') + aws.ec2.tag_name(instance) + ': ' + instance.instance_id
                failures.append(msg)
            else:
                msg = util.colors.green('success: ') + aws.ec2.tag_name(instance) + ': ' + instance.instance_id
                successes.append(msg)
            if not quiet:
                stderr(msg)
        list(pool.thread.map(run, instances))
        # TODO would be really nice to see these results, plus unknowns:, when ^C to exit early
        if not quiet:
            stderr('\nresults:')
            for msg in successes + failures:
                stderr('', msg)
            stderr('\ntotals:')
            stderr(util.colors.green(' successes:'), str(len(successes)))
            stderr(util.colors.red(' failures:'), str(len(failures)))
        for result in results:
            print(result)
        assert not failures, '\n'.join(util.strings.rm_color(f) for f in failures)
    elif cmd:
        res = sh.run(*make_ssh_cmd(instances[0]),
                     echo=False,
                     stream=not prefixed and not no_stream,
                     raw_cmd=True,
                     callback=_make_callback(instances[0], quiet, None, no_stream) if prefixed else None,
                     warn=True)
        assert ': Permission denied (publickey).' not in res['stdout'] + res['stderr'], 'Permission denied (publickey)'
        if res['exitcode'] != 0:
            sys.exit(res['exitcode'])
        return res['stdout']
    else:
        try:
            subprocess.check_call(ssh_cmd + [(user or aws.ec2.ssh_user(instances[0])) + '@' + (instances[0].private_ip_address if internal else instances[0].public_dns_name)])
        except subprocess.CalledProcessError:
            sys.exit(1)

if __name__ == '__main__':
    with aws.setup():
        argh.dispatch_command(main)
