#!/usr/bin/env python3
import random
import time
import argh
import shell as sh
import aws
import aws.ec2
from aws import stderr

def main(*selectors,
         internal: 'use internal ipv4 address' = False, # type: ignore
         yes=False,
         seconds: 'after this many seconds, terminate any instances not ready and return the id of ready instances' = 0): # type: ignore
    assert selectors, 'you cannot wait for all things, specify some selectors'
    assert selectors != ['*'], 'you cannot wait for all things, specify some selectors'
    pendings = aws.ec2.ls(selectors, 'pending')
    if pendings:
        stderr('wait for pending instances:')
        for pending in pendings:
            stderr('', aws.ec2.format(pending))
        sh.check_call('aws-ec2-wait-for-state -y', *[i.instance_id for i in pendings])
    instances = aws.ec2.ls(selectors, 'running')
    assert instances, 'didnt find any instances for those selectors'
    stderr('going to wait for ssh on the following instances:')
    for i in instances:
        stderr('', aws.ec2.format(i))
    if not yes:
        stderr('\nwould you like to proceed? y/n\n')
        assert sh.getch() == 'y', 'abort'
    stderr('wait for ssh...')
    global_start = time.time()
    for i in range(200):
        running = aws.ec2.ls([i.instance_id for i in instances], 'running')
        running_ids = ' '.join([i.instance_id for i in running])
        sh.run('aws-ec2-ip-callback', *[i.private_ip_address if internal else i.public_dns_name for i in running], '&& sleep 1', warn=True) # define this entrypoint if you want to do something with ipv4 of new instances
        local_start = time.time()
        try:
            res = sh.run(f'aws-ec2-ssh {running_ids} --batch-mode -t 10 -yc "whoami >/dev/null" 2>&1', warn=True, stream=i > 30)
            ready_ids = [x.split()[-1]
                         for x in res['stdout'].splitlines()
                         if x.startswith('success: ')]
            num_ready = len(ready_ids)
            num_not_ready = len(instances) - num_ready
            stderr(f'waiting for {num_not_ready}/{len(instances)} nodes')
            if seconds and time.time() - global_start > seconds and num_not_ready:
                stderr(f'waited for {seconds} seconds, {num_ready} ready, {num_not_ready} not ready and will be terminated')
                not_ready_ids = [i.instance_id
                                 for i in instances
                                 if i.instance_id not in set(ready_ids)]
                if not_ready_ids:
                    sh.check_call('aws-ec2-rm -y', *not_ready_ids)
                num_not_ready = 0
            if num_not_ready == 0:
                assert ready_ids, 'failed to wait for ssh: no instances'
                return ready_ids
        except KeyboardInterrupt:
            raise
        time.sleep(max(0, 5 - (time.time() - local_start)) + random.random())
    assert False, 'failed to wait for ssh'

if __name__ == '__main__':
    with aws.setup():
        argh.dispatch_command(main)
