#!/usr/bin/env python3
import aws.ec2
import argh
import aws
import sys

def main(sort: 'id | 0 | 32' = 'id', check_num_instances=False): # type: ignore
    print('source num-instances direction destination protocol:from-port:to-port', file=sys.stderr)
    vals = []
    for sg in aws.ec2.sgs():
        src = '%s:%s' % (sg.group_id, getattr(sg, 'group_name', None) or getattr(sg, 'description', '<no-name>'))
        src = src.replace(' ', '_')
        if check_num_instances:
            num = str(len(aws.ec2.ls([sg.group_id], 'running')))
        else:
            num = '?'
        for key in ['ip_permissions_egress', 'ip_permissions']:
            for x in getattr(sg, key):
                for dst in [cidr['CidrIp'] for cidr in x['IpRanges']] + ['%s:%s' % (group['GroupId'], group.get('GroupName', '<no-name>')) for group in x['UserIdGroupPairs']]:
                    dst = dst.replace(' ', '_')
                    vals.append(
                        '{} {} {} {} {}'.format(src,
                                                num,
                                                'ingress' if key == 'ip_permissions' else 'egress',
                                                dst,
                                                ' %(IpProtocol)s:%(FromPort)s:%(ToPort)s' % x if 'FromPort' in x else ' Any:Any:Any'
                                                ).replace(':-1', ':Any'))
    if sort != 'id':
        assert sort in ['0', '32']
        if sort == '0':
            vals = sorted(vals, key=lambda x: x.split()[2].endswith('/32'), reverse=True)
            vals = sorted(vals, key=lambda x: x.split()[2].endswith('/0'), reverse=True)
        else:
            vals = sorted(vals, key=lambda x: x.split()[2].endswith('/0'), reverse=True)
            vals = sorted(vals, key=lambda x: x.split()[2].endswith('/32'), reverse=True)
    if check_num_instances:
        vals = sorted(vals, key=lambda x: int(x.split()[1]), reverse=True)
    for val in vals:
        print(val)

if __name__ == '__main__':
    with aws.setup():
        argh.dispatch_command(main)
