#!/usr/bin/env python3
import shell
import logging
import argh
import cli_aws
import boto3
import datetime

def main(*selectors, yes=False, no_wait=False, name=None, description=None, no_append_date=False, tag=None):
    assert name, 'you must provide a name'
    assert '__' not in name, 'you cannot use "__" in a name'
    if not description:
        description = name
    if not no_append_date:
        name += '__' + str(datetime.datetime.utcnow()).replace(' ', 'T').split('.')[0].replace(':', '-') + 'Z'
    assert selectors, 'you must specify some selectors'
    instances = cli_aws.ls(selectors, 'running') + cli_aws.ls(selectors, 'stopped')
    assert len(instances) == 1, 'didnt find exactly one instance:\n%s' % ('\n'.join(cli_aws.format(i) for i in instances) or '<nothing>')
    instance = instances[0]
    logging.info('going to image the following instance:')
    logging.info(' ' + cli_aws.format(instance))
    if not yes:
        logging.info('\nwould you like to proceed? y/n\n')
        assert shell.getch() == 'y', 'abort'
    if instance.state['Name'] == 'running':
        shell.run('aws-ec2-stop -y', instance.instance_id)
        shell.run('aws-ec2-wait-for-state -y', instance.instance_id, '--end-state stopped', stream=True)
    image = instance.create_image(Name=name, Description=description)
    tags = [{'Key': 'ssh-user', 'Value': cli_aws.tags(instance)['ssh-user']}]
    if tag:
        key, value = tag.split('=')
        tags += [{'Key': key, 'Value': value}]
    image.create_tags(Tags=tags)
    ami_id = image.image_id
    if not no_wait:
        logging.info('wait for image...')
        boto3.client('ec2').get_waiter('image_available').wait(ImageIds=[ami_id], WaiterConfig={'MaxAttempts': 256})
    return ami_id

if __name__ == '__main__':
    with cli_aws.setup():
        argh.dispatch_command(main)
