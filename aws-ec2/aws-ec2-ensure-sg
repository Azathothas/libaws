#!/usr/bin/env python3
import botocore
import boto3
import argh
import cli_aws
import shell

def main(vpc_name, sg_name, *rules, quiet=False):
    vpc_id = shell.run('aws-vpc-ensure', vpc_name, stream=False)
    try:
        sg_id = shell.run('aws-ec2-sg-id', sg_name, stream=False)
    except:
        sg = boto3.resource('ec2').create_security_group(Description=sg_name, GroupName=sg_name, VpcId=vpc_id)
    else:
        [sg] = list(boto3.resource('ec2').security_groups.filter(GroupIds=[sg_id], Filters=[{'Name': 'vpc-id', 'Values': [vpc_id]}]))
    delete = {}
    for r in sg.ip_permissions:
        assert r['FromPort'] == r['ToPort'], r
        for ip in r['IpRanges']:
            if not (r['IpProtocol'] == 'tcp' and r['ToPort'] == 22 and ip['CidrIp'].endswith('/32')):
                delete[(r['IpProtocol'], str(r['ToPort']), ip['CidrIp'])] = True
    for r in rules:
        proto, port, cidr = r.split(':')
        if (proto, port, cidr) in delete:
            delete[(proto, port, cidr)] = False
        else:
            try:
                sg.authorize_ingress(CidrIp=cidr, FromPort=int(port), ToPort=int(port), IpProtocol=proto)
            except botocore.exceptions.ClientError:
                assert port == '22' and cidr.endswith('/32'), f'only tcp:22:/32 is allowed to be a duplicate: {[proto, port, cidr]}'
    for (proto, port, cidr), v in delete.items():
        if v:
            sg.revoke_ingress(CidrIp=cidr, FromPort=int(port), ToPort=int(port), IpProtocol=proto)

if __name__ == '__main__':
    with cli_aws.setup():
        argh.dispatch_command(main)
